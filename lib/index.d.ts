/// <reference types="node" />
import InvoiceType, { AccountingCustomerParty, AccountingSupplierParty, BuyerCustomerParty, Delivery, DeliveryNoteReferences, InvoiceLines, LegalMonetaryTotal, PaymentMeans, SellerSupplierParty, TaxTotal } from "./interface";
export default class Invoice {
    DocumentType: number;
    SubDocumentType?: string;
    SubDocumentTypeOrigin?: string;
    TargetConsolidator?: string;
    ClientOnTargetConsolidator?: string;
    ClientBankAccount?: string;
    ID?: string;
    ID36?: string;
    UUID?: string;
    EgovFlag?: boolean;
    ISDS_ID?: string;
    FileReference?: string;
    ReferenceNumber?: string;
    EgovClassifiers?: any;
    IssuingSystem?: string;
    IssueDate?: string | Date;
    TaxPointDate?: string | Date;
    VATApplicable?: string;
    ElectronicPossibilityAgreementReference: string;
    Note?: string;
    LocalCurrencyCode: string;
    ForeignCurrencyCode?: string;
    CurrRate: number | string;
    RefCurrRate: number | string;
    Extensions?: any;
    AccountingSupplierParty?: AccountingSupplierParty;
    SellerSupplierParty?: SellerSupplierParty;
    AnonymousCustomerParty?: any;
    AccountingCustomerParty?: AccountingCustomerParty;
    BuyerCustomerParty?: BuyerCustomerParty;
    OrderReferences?: any;
    OriginalDocumentReferences?: any;
    ContractReferences?: any;
    Delivery?: Delivery;
    DeliveryNoteReferences?: DeliveryNoteReferences;
    InvoiceLines?: InvoiceLines;
    NonTaxedDeposits?: any;
    TaxedDeposits?: any;
    TaxTotal?: TaxTotal;
    LegalMonetaryTotal?: LegalMonetaryTotal;
    PaymentMeans?: PaymentMeans;
    SupplementsList?: any;
    private $_xmlns;
    private $_version;
    constructor(data?: InvoiceType | string | Buffer);
    assign(data: InvoiceType, validate?: boolean): void;
    validate(xml?: string): true;
    toXML(validate?: boolean): string;
    toJSON(): string;
}
export { InvoiceType };
